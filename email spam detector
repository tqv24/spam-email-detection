{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1507821,"sourceType":"datasetVersion","datasetId":888171}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-11T17:44:48.065347Z","iopub.execute_input":"2024-07-11T17:44:48.066126Z","iopub.status.idle":"2024-07-11T17:44:48.449100Z","shell.execute_reply.started":"2024-07-11T17:44:48.066094Z","shell.execute_reply":"2024-07-11T17:44:48.448189Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/email-classification-nlp/SMS_train.csv\n/kaggle/input/email-classification-nlp/SMS_test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# Import and EDA\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"/kaggle/input/email-classification-nlp/SMS_train.csv\", encoding='latin-1')\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:48.450834Z","iopub.execute_input":"2024-07-11T17:44:48.451199Z","iopub.status.idle":"2024-07-11T17:44:49.146387Z","shell.execute_reply.started":"2024-07-11T17:44:48.451174Z","shell.execute_reply":"2024-07-11T17:44:49.145250Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"     S. No.                                       Message_body     Label\n0         1                         Rofl. Its true to its name  Non-Spam\n1         2  The guy did some bitching but I acted like i'd...  Non-Spam\n2         3  Pity, * was in mood for that. So...any other s...  Non-Spam\n3         4               Will ü b going to esplanade fr home?  Non-Spam\n4         5  This is the 2nd time we have tried 2 contact u...      Spam\n..      ...                                                ...       ...\n952     953  hows my favourite person today? r u workin har...  Non-Spam\n953     954                      How much you got for cleaning  Non-Spam\n954     955  Sorry da. I gone mad so many pending works wha...  Non-Spam\n955     956                                 Wat time ü finish?  Non-Spam\n956     957                    Just glad to be talking to you.  Non-Spam\n\n[957 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>S. No.</th>\n      <th>Message_body</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Rofl. Its true to its name</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>The guy did some bitching but I acted like i'd...</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Pity, * was in mood for that. So...any other s...</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Will ü b going to esplanade fr home?</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>This is the 2nd time we have tried 2 contact u...</td>\n      <td>Spam</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>953</td>\n      <td>hows my favourite person today? r u workin har...</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>953</th>\n      <td>954</td>\n      <td>How much you got for cleaning</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>954</th>\n      <td>955</td>\n      <td>Sorry da. I gone mad so many pending works wha...</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>955</th>\n      <td>956</td>\n      <td>Wat time ü finish?</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>956</th>\n      <td>957</td>\n      <td>Just glad to be talking to you.</td>\n      <td>Non-Spam</td>\n    </tr>\n  </tbody>\n</table>\n<p>957 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.describe(include='object')","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:49.147797Z","iopub.execute_input":"2024-07-11T17:44:49.148163Z","iopub.status.idle":"2024-07-11T17:44:49.167558Z","shell.execute_reply.started":"2024-07-11T17:44:49.148127Z","shell.execute_reply":"2024-07-11T17:44:49.166600Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"                  Message_body     Label\ncount                      957       957\nunique                     945         2\ntop     Sorry, I'll call later  Non-Spam\nfreq                         4       835","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Message_body</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>957</td>\n      <td>957</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>945</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Sorry, I'll call later</td>\n      <td>Non-Spam</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>4</td>\n      <td>835</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['input'] = df['Message_body']\ndf['label'] = pd.Categorical(df['Label'])\ndf['label'] = df['label'].cat.codes\ndf.input.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:49.168703Z","iopub.execute_input":"2024-07-11T17:44:49.168970Z","iopub.status.idle":"2024-07-11T17:44:49.180619Z","shell.execute_reply.started":"2024-07-11T17:44:49.168946Z","shell.execute_reply":"2024-07-11T17:44:49.179445Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"0                           Rofl. Its true to its name\n1    The guy did some bitching but I acted like i'd...\n2    Pity, * was in mood for that. So...any other s...\n3                 Will ü b going to esplanade fr home?\n4    This is the 2nd time we have tried 2 contact u...\nName: input, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df['input']","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:49.183749Z","iopub.execute_input":"2024-07-11T17:44:49.184382Z","iopub.status.idle":"2024-07-11T17:44:49.192092Z","shell.execute_reply.started":"2024-07-11T17:44:49.184343Z","shell.execute_reply":"2024-07-11T17:44:49.191182Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"0                             Rofl. Its true to its name\n1      The guy did some bitching but I acted like i'd...\n2      Pity, * was in mood for that. So...any other s...\n3                   Will ü b going to esplanade fr home?\n4      This is the 2nd time we have tried 2 contact u...\n                             ...                        \n952    hows my favourite person today? r u workin har...\n953                        How much you got for cleaning\n954    Sorry da. I gone mad so many pending works wha...\n955                                   Wat time ü finish?\n956                      Just glad to be talking to you.\nName: input, Length: 957, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df = df.drop(columns = ['S. No.', 'Message_body', 'Label'], axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:49.193358Z","iopub.execute_input":"2024-07-11T17:44:49.193696Z","iopub.status.idle":"2024-07-11T17:44:49.200329Z","shell.execute_reply.started":"2024-07-11T17:44:49.193667Z","shell.execute_reply":"2024-07-11T17:44:49.199471Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# create dataset and tok_ds\nfrom datasets import Dataset, DatasetDict\nds = Dataset.from_pandas(df)\n\nfrom transformers import AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"microsoft/deberta-v3-base\")\n\ndef tok_func(x):\n    return tokenizer(x[\"input\"])\n\ntok_ds = ds.map(tok_func, batched = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:49.201581Z","iopub.execute_input":"2024-07-11T17:44:49.201889Z","iopub.status.idle":"2024-07-11T17:44:58.329308Z","shell.execute_reply.started":"2024-07-11T17:44:49.201861Z","shell.execute_reply":"2024-07-11T17:44:58.328458Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/52.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8af35710ffb345598d6307b93e06c78d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/579 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ec4ef615cadb45b5a0c4e146354a4b92"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"spm.model:   0%|          | 0.00/2.46M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"48d7424d2a5245a88b0a4fc1538881e8"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/convert_slow_tokenizer.py:562: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d5c93e25835d4907809f618839035a24"}},"metadata":{}}]},{"cell_type":"code","source":"tok_ds[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:58.330731Z","iopub.execute_input":"2024-07-11T17:44:58.331089Z","iopub.status.idle":"2024-07-11T17:44:58.340570Z","shell.execute_reply.started":"2024-07-11T17:44:58.331055Z","shell.execute_reply":"2024-07-11T17:44:58.339581Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"{'input': 'Rofl. Its true to its name',\n 'label': 0,\n 'input_ids': [1, 11288, 20516, 260, 2952, 980, 264, 359, 601, 2],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}"},"metadata":{}}]},{"cell_type":"code","source":"eval_df = pd.read_csv(\"/kaggle/input/email-classification-nlp/SMS_test.csv\", encoding='latin-1')\neval_df.describe(include = 'object')\neval_df['input'] = eval_df['Message_body']\neval_df['label'] = pd.Categorical(eval_df['Label'])\neval_df['label'] = eval_df['label'].cat.codes\neval_df = eval_df.drop(columns=['S. No.', 'Message_body', 'Label'], axis = 1)\n\neval_ds = Dataset.from_pandas(eval_df)\neval_ds = eval_ds.map(tok_func,batched = True)","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:58.341762Z","iopub.execute_input":"2024-07-11T17:44:58.342076Z","iopub.status.idle":"2024-07-11T17:44:58.417701Z","shell.execute_reply.started":"2024-07-11T17:44:58.342052Z","shell.execute_reply":"2024-07-11T17:44:58.416790Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/125 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d57317e36aef46968f54926675d32fd5"}},"metadata":{}}]},{"cell_type":"code","source":"dds = tok_ds.train_test_split(0.25)\ndds","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:58.418819Z","iopub.execute_input":"2024-07-11T17:44:58.419080Z","iopub.status.idle":"2024-07-11T17:44:58.434346Z","shell.execute_reply.started":"2024-07-11T17:44:58.419057Z","shell.execute_reply":"2024-07-11T17:44:58.433452Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"DatasetDict({\n    train: Dataset({\n        features: ['input', 'label', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 717\n    })\n    test: Dataset({\n        features: ['input', 'label', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 240\n    })\n})"},"metadata":{}}]},{"cell_type":"code","source":"from transformers import AutoModelForSequenceClassification, TrainingArguments, Trainer","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:44:58.435408Z","iopub.execute_input":"2024-07-11T17:44:58.435755Z","iopub.status.idle":"2024-07-11T17:45:09.605449Z","shell.execute_reply.started":"2024-07-11T17:44:58.435723Z","shell.execute_reply":"2024-07-11T17:45:09.604686Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"2024-07-11 17:45:00.294526: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-11 17:45:00.294658: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-11 17:45:00.417489: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\n\nbs = 1\nepochs = 1\nlr = 8e-5\n\n\n\nargs = TrainingArguments('outputs', learning_rate=lr, \n                         warmup_ratio=0.1, \n                         lr_scheduler_type='cosine', fp16=True,\n                         evaluation_strategy=\"epoch\", \n                         per_device_train_batch_size=bs, \n                         per_device_eval_batch_size=bs*2,\n                         num_train_epochs=epochs, \n                         weight_decay=0.01, report_to='none')\n   ","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:45:09.606532Z","iopub.execute_input":"2024-07-11T17:45:09.607137Z","iopub.status.idle":"2024-07-11T17:45:09.684459Z","shell.execute_reply.started":"2024-07-11T17:45:09.607111Z","shell.execute_reply":"2024-07-11T17:45:09.683665Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1494: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"model = AutoModelForSequenceClassification.from_pretrained(\"microsoft/deberta-v3-base\", num_labels=2)\nfrom sklearn.metrics import accuracy_score                                                         \ndef compute_metrics(eval_pred):\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=1)\n    accuracy = accuracy_score(labels, predictions)\n    return {\"accuracy\": accuracy}\n\nlearner  = Trainer(model, args, \n                   train_dataset=dds['train'], \n                   eval_dataset=dds['test'], \n                   tokenizer=tokenizer,\n                   compute_metrics = compute_metrics  )     \n","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:45:09.685711Z","iopub.execute_input":"2024-07-11T17:45:09.686310Z","iopub.status.idle":"2024-07-11T17:45:20.783234Z","shell.execute_reply.started":"2024-07-11T17:45:09.686273Z","shell.execute_reply":"2024-07-11T17:45:20.782441Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/371M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a3649015a2f74f75b690ea8e1ad15422"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n  return self.fget.__get__(instance, owner)()\nSome weights of DebertaV2ForSequenceClassification were not initialized from the model checkpoint at microsoft/deberta-v3-base and are newly initialized: ['classifier.bias', 'classifier.weight', 'pooler.dense.bias', 'pooler.dense.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"learner.train()","metadata":{"execution":{"iopub.status.busy":"2024-07-11T17:45:20.785972Z","iopub.execute_input":"2024-07-11T17:45:20.786232Z","iopub.status.idle":"2024-07-11T17:46:50.086393Z","shell.execute_reply.started":"2024-07-11T17:45:20.786209Z","shell.execute_reply":"2024-07-11T17:46:50.085544Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='717' max='717' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [717/717 01:27, Epoch 1/1]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.622200</td>\n      <td>0.234201</td>\n      <td>0.887500</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=717, training_loss=0.5983185176237524, metrics={'train_runtime': 88.3326, 'train_samples_per_second': 8.117, 'train_steps_per_second': 8.117, 'total_flos': 8827225877292.0, 'train_loss': 0.5983185176237524, 'epoch': 1.0})"},"metadata":{}}]}]}